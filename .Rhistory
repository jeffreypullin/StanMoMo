# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print( getwd() )
## SURSAUD data
### By department
print('Load the sursaud data by department')
dest_file_sursaud <- "sursaud_dep.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/eceb9fb4-3ebc-4da3-828d-f5939712600a"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
### By region
print('Load the sursaud data by region')
dest_file_sursaud <- "sursaud_reg.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/d2af5160-a21d-47b7-8f30-3c20dade63b1"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
### For France
print('Load the sursaud data for France')
dest_file_sursaud <- "sursaud_fr.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/219427ba-7e90-4eb1-9ac7-4de2e7e2112c"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
## SPF Data
### By department and sex
print('Load the SPF data with current hospitals counts and cumulative R counts')
dest_file_spf <- "SPF_cum.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/63352e38-d353-4b54-bfd1-f1b3ee1cabd7"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### By department
print('Load the SPF data for daily incidence')
dest_file_spf <- "SPF_incid.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/6fadff46-9efd-4c53-942a-54aca783c30c"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### By region and age cluster
print('Load the SPF cumulative data by region and age group')
dest_file_spf <- "SPF_cum_reg_age_group.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/08c18e08-6780-452d-9b8c-ae244ad529b3"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### Number of hospital services that have declared at least one case
print('Load the SPF data regarding the number of hospital services that have declared at least one case')
dest_file_spf <- "SPF_service_case_declaration.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/41b9bd2a-b5b6-4271-8878-e45a8902ef00"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
## Test data
### Data from 3labos
print('Load the test data from 3labos ')
dest_file_test <- "test_data_3labos.csv"
url_test <- "https://www.data.gouv.fr/fr/datasets/r/b4ea7b4b-b7d1-4885-a099-71852291ff20"
if(file.exists(dest_file_test)){
file.remove(dest_file_test)
download.file(url = url_test, destfile = dest_file_test)
}else{download.file(url = url_test, destfile = dest_file_test)}
library(rstudioapi) # load it
# the following line is for getting the path of your current open file
current_path <- getActiveDocumentContext()$path
# The next line set the working directory to the relevant one:
setwd(dirname(current_path ))
# you can make sure you are in the right directory
print( getwd() )
### By department
print('Load the sursaud data by department')
dest_file_sursaud <- "sursaud_dep.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/eceb9fb4-3ebc-4da3-828d-f5939712600a"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
file.exists(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
### By region
print('Load the sursaud data by region')
dest_file_sursaud <- "sursaud_reg.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/d2af5160-a21d-47b7-8f30-3c20dade63b1"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
### For France
print('Load the sursaud data for France')
dest_file_sursaud <- "sursaud_fr.csv"
url_sursaud <- "https://www.data.gouv.fr/fr/datasets/r/219427ba-7e90-4eb1-9ac7-4de2e7e2112c"
if(file.exists(dest_file_sursaud)){
file.remove(dest_file_sursaud)
download.file(url = url_sursaud, destfile = dest_file_sursaud)
}else{download.file(url = url_sursaud, destfile = dest_file_sursaud)}
## SPF Data
### By department and sex
print('Load the SPF data with current hospitals counts and cumulative R counts')
dest_file_spf <- "SPF_cum.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/63352e38-d353-4b54-bfd1-f1b3ee1cabd7"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### By department
print('Load the SPF data for daily incidence')
dest_file_spf <- "SPF_incid.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/6fadff46-9efd-4c53-942a-54aca783c30c"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### By region and age cluster
print('Load the SPF cumulative data by region and age group')
dest_file_spf <- "SPF_cum_reg_age_group.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/08c18e08-6780-452d-9b8c-ae244ad529b3"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
### Number of hospital services that have declared at least one case
print('Load the SPF data regarding the number of hospital services that have declared at least one case')
dest_file_spf <- "SPF_service_case_declaration.csv"
url_spf <- "https://www.data.gouv.fr/fr/datasets/r/41b9bd2a-b5b6-4271-8878-e45a8902ef00"
if(file.exists(dest_file_spf)){
file.remove(dest_file_spf)
download.file(url = url_spf, destfile = dest_file_spf)
}else{download.file(url = url_spf, destfile = dest_file_spf)}
## Test data
### Data from 3labos
print('Load the test data from 3labos ')
dest_file_test <- "test_data_3labos.csv"
url_test <- "https://www.data.gouv.fr/fr/datasets/r/b4ea7b4b-b7d1-4885-a099-71852291ff20"
if(file.exists(dest_file_test)){
file.remove(dest_file_test)
download.file(url = url_test, destfile = dest_file_test)
}else{download.file(url = url_test, destfile = dest_file_test)}
library(readr)
library(rstudioapi)
library(tidyverse)
library(knitr)
library(gridExtra)
library(ggplot2)
library(tscount)
ggplot(data = SPF_incid_ggplot) +
geom_line(mapping = aes(x = Date, y = delta_Count, color = Compartment))
SPF_incid <- read_delim('SPF_incid.csv', delim = ';')
head(SPF_incid)
SPF_incid_V1 <- SPF_incid %>% group_by(jour) %>% summarize(H = sum(incid_hosp), D = sum(incid_dc),ICU = sum(incid_rea), RAD = sum(incid_rad))
SPF_incid_ggplot <- data.frame(Date = as.Date(character()), Compartment = character(), delta_Count = integer())
compartments = c('H','D','ICU','RAD')
for(comp in compartments){
SPF_incid_ggplot <- rbind(SPF_incid_ggplot, data.frame(Date = SPF_incid_V1$jour, Compartment = comp, delta_Count = pull(SPF_incid_V1[comp])))
}
ggplot(data = SPF_incid_ggplot) +
geom_line(mapping = aes(x = Date, y = delta_Count, color = Compartment))
# Converted the daily number of hospitalized patients into a time serie
ts(SPF_incid_V1$H)
# Converted the daily number of hospitalized patients into a time serie
ts(SPF_incid_V1$H, frequency = 7)
autoplot(H_ts)
# Converted the daily number of hospitalized patients into a time serie
H_ts <- ts(SPF_incid_V1$H, frequency = 7)
autoplot(H_ts)
# Converted the daily number of hospitalized patients into a time serie
SPF_incid_V1
# Converted the daily number of hospitalized patients into a time serie
H_df <- SPF_incid_V1$H
H_df
# Converted the daily number of hospitalized patients into a time serie
H_df <- data.frame(H = SPF_incid_V1$H)
# Converted the daily number of hospitalized patients into a time serie
H_df <- data.frame(H = SPF_incid_V1$H)
rownames(H_df) <- SPF_incid_V1$jour
H_df
autoplot(H_df)
autoplot(H_df$H)
ggfortify
library(ggfortify)
install.packages("ggfortify")
library(ggfortify)
autoplot(ts(H_df$H))
autoplot(ts(H_df$H, frequency = 7))
SPF_incid_V1$jour[1]
autoplot(ts(H_df$H, start =SPF_incid_V1$jour[1]  frequency = 7))
autoplot(ts(H_df$H, start =SPF_incid_V1$jour[1],  frequency = 7))
ts(H_df$H, start =SPF_incid_V1$jour[1],  frequency = 7)
ts(H_df$H, frequency = 365)
SPF_incid_V1$jour[0]
rownames(H_df) <- SPF_incid_V1$jour[1]
SPF_incid_V1$jour[1]
type(SPF_incid_V1$jour[1])
typeof(SPF_incid_V1$jour[1])
# Converted the daily number of hospitalized patients into a time serie
SPF_incid_V1$jour
# Converted the daily number of hospitalized patients into a time serie
as.date(SPF_incid_V1$jour[1])
# Converted the daily number of hospitalized patients into a time serie
as.Date(SPF_incid_V1$jour[1])
# Converted the daily number of hospitalized patients into a time serie
start_day = as.Date(SPF_incid_V1$jour[1])
year(start_day)
Year(start_day)
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
install.packages("lubridate")
start_day = as.Date(SPF_incid_V1$jour[1])
Year(start_day)
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
year(start_day)
as.numeric(format(start_day, "%j"))
autoplot(H_ts)
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
H_ts <- ts(SPF_incid_V1$H, frequency = 365, start =c(year(start_day,as.numeric(format(start_day, "%j")) )))
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
H_ts <- ts(SPF_incid_V1$H, frequency = 365, start =c(year(start_day),as.numeric(format(start_day, "%j")) ))
autoplot(H_ts)
library(readr)
library(rstudioapi)
library(tidyverse)
library(knitr)
library(gridExtra)
library(ggplot2)
library(tscount)
library(ggfortify)
SPF_incid <- read_delim('SPF_incid.csv', delim = ';')
head(SPF_incid)
SPF_incid_V1 <- SPF_incid %>% group_by(jour) %>% summarize(H = sum(incid_hosp), D = sum(incid_dc),ICU = sum(incid_rea), RAD = sum(incid_rad))
SPF_incid_ggplot <- data.frame(Date = as.Date(character()), Compartment = character(), delta_Count = integer())
compartments = c('H','D','ICU','RAD')
for(comp in compartments){
SPF_incid_ggplot <- rbind(SPF_incid_ggplot, data.frame(Date = SPF_incid_V1$jour, Compartment = comp, delta_Count = pull(SPF_incid_V1[comp])))
}
ggplot(data = SPF_incid_ggplot) +
geom_line(mapping = aes(x = Date, y = delta_Count, color = Compartment))
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
H_ts <- ts(SPF_incid_V1$H, frequency = 365, start =c(year(start_day),as.numeric(format(start_day, "%j")) ))
autoplot(H_ts)
week(start_day)
weekdays(start_day)
weekday(start_day)
wday(start_day)
H_ts <- ts(SPF_incid_V1$H, frequency = 7, start =c(week(start_day), wday(start_day)))
autoplot(H_ts)
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
week(start_day)
weekday(start_day)
# Converted the daily number of hospitalized patients into a time serie
library(lubridate)
start_day = as.Date(SPF_incid_V1$jour[1])
week(start_day)
H_ts <- ts(SPF_incid_V1$H, frequency = 7, start =c(week(start_day), wday(start_day)))
autoplot(H_ts)
ggseasonplot(H_ts)
install.packages("forecast")
library(forecast)
ggseasonplot(H_ts)
ggseasonplot(H_ts, polar = TRUE)
autoplot(H_ts)
ggseasonplot(H_ts, polar = FALSE)
ggseasonplot(H_ts, polar = TRUE)
ggsubseriesplot(a10)
ggsubseriesplot(H_ts)
ICU_ts <- ts(SPF_incid_V1$ICU, frequency = 7, start =c(week(start_day), wday(start_day)))
ggseasonplot(ICU_ts, polar = FALSE)
ggseasonplot(ICU_ts, polar = TRUE)
library(StanMoMo)
library(StanMoMo)
library(StMoMo)
library(matrixcalc)
library(rstan)
library(shinystan)
library("fanplot")
library("RColorBrewer")
library(tidyverse)
library(ggplot2)
library(purrr)
#Load data for France and define range of ages and years of interest
load("dataFR.Rdata")
ages.fit<-50:90
years.fit<-1970:2017
#Define vectors as characters
ages.fitc<-as.character(ages.fit)
years.fitc<-as.character(years.fit)
cohort.fit<-(years.fit[1]-ages.fit[length(ages.fit)]):(years.fit[length(years.fit)]-ages.fit[1])
#Extract death and exposures from the data base
dataStMoMo<-StMoMoData(data, series = "male")
death<-as.integer(vec(dataStMoMo$Dxt[ages.fitc,years.fitc]))
exposure<-as.integer(vec(dataStMoMo$Ext[ages.fitc,years.fitc]))
death
dataStMoMo$Dxt[ages.fitc,years.fitc]
death<-as.integer(vec(dataStMoMo$Dxt[ages.fitc,years.fitc]))
exposure<-as.integer(vec(dataStMoMo$Ext[ages.fitc,years.fitc]))
lc_stan(death, exposure,0)
lc_stan(dataStMoMo$Dxt[ages.fitc,years.fitc], exposure,0)
lc_stan(dataStMoMo$Dxt[ages.fitc,years.fitc], exposure,1)
lc_fit <- lc_stan(dataStMoMo$Dxt[ages.fitc,years.fitc], exposure,10, iter =1000, chains = 1)
lc_fit <- lc_stan(dataStMoMo$Dxt[ages.fitc,years.fitc], exposure,10, iter =2000, chains = 1)
list_of_draws <- extract(lc_fit)
extract(lc_fit)
lc_fit
class(lc_fit)
matrix_of_draws <- as.matrix(lc_fit)
print(colnames(matrix_of_draws))
matrix_of_draws["a[1]"]
matrix_of_draws[1,1]
matrix_of_draws[,1]
hist(matrix_of_draws[,1])
hist(matrix_of_draws[,2])
hist(matrix_of_draws[,3])
library(StanMoMo)
knitr::opts_chunk$set(echo = TRUE)
library(StanMoMo)
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
install.packages("latex2exp")
print(fitLC,pars = "a")
library("fanplot")
library("RColorBrewer")
library(latex2exp)
params<-rstan::extract(fitLC)
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
plot(ages.fit, colMeans(params$b), ylim=range(params$b),ylab=TeX("$\\beta_x$"), xlab="Age: x")
fan(data=params$b, start=ages.fit[1],type = "interval", ln = NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Reds"))))
plot(years.fit, colMeans(params$k), ylim=range(params$k),ylab=TeX("$\\kappa_t$"), xlab="Year: t")
fan(data=params$k, start=years.fit[1],type = "percentile",ln = NULL, probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
# Resize the forecast deaths rates as an array "Number of draws X Ages X Years to predict"
samplesize<-4000
years.predict<-2008:2017
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),length(years.predict)),
dimnames = list(c(1:samplesize),formatC(ages.fit),formatC(years.predict)))
#Fan plots for ages 65,75,85
probs = c(2.5, 10, 25, 50, 75, 90, 97.5)
qxt <- deathFR / exposureFR
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
fan(pred[,"65" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Reds"))), ln = NULL)
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
fan(pred[,"65" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Reds"))), ln = NULL)
fan(pred[,"75" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Greens"))), ln = NULL)
fan(pred[,"85" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Blues"))), ln = NULL)
text(1980, qxt[c("65", "75", "85"), "2000"],
labels = c("x = 65", "x = 75", "x = 85"))
library(StanMoMo)
knitr::opts_chunk$set(echo = TRUE)
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
knitr::opts_chunk$set(echo = TRUE)
library(StanMoMo)
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
library(StanMoMo)
library(StMoMo)
library(matrixcalc)
library(rstan)
library(shinystan)
library("fanplot")
library("RColorBrewer")
library(tidyverse)
library(ggplot2)
library(purrr)
library(HMDHFDplus)
library(demography)
library(StanMoMo)
library(StMoMo)
library(matrixcalc)
library(rstan)
library(shinystan)
library("fanplot")
library("RColorBrewer")
library(tidyverse)
library(ggplot2)
library(purrr)
library(HMDHFDplus)
library(demography)
#Load data for HMD
CNTRY <- 'FRATNP'
item <- 'Deaths_1x1' # "Exposures_1x1"
age_range<-50:90
cal_year_range<-1970:2017
gender <- "Male"
retrieve_HMD_data <- function(CNTRY, item, cal_year_range, age_range, gender){
username <- 'pierre.olivier.goffard@gmail.com'
password <- 'StanMoMo'
path <- paste0("https://www.mortality.org/hmd/", CNTRY,
"/STATS/", item)
TEXT <- httr::GET(path, httr::authenticate(username, password),
httr::config(ssl_verifypeer = 0L))
status <- httr::http_status(TEXT)
DF <- read.table(text = httr::content(TEXT, encoding = "UTF-8"),
header = TRUE, skip = 2, na.strings = ".",
as.is = TRUE)
DF <- DF %>% filter( (Age %in% age_range) & (Year %in% cal_year_range) ) %>% select(Year, Age, gender)
mat <- as.matrix(pivot_wider(DF, names_from = Year, values_from = gender) %>% column_to_rownames(., var = "Age"))
vect <- as.integer(vec(mat))
return(
list(DF = DF, mat = mat, vect = vect)
)
}
death_fra <- retrieve_HMD_data(CNTRY, 'Deaths_1x1', cal_year_range, age_range, gender)
death_fra
# fit a Lee-Carter model using stan
lc_fit_stan <- apc_stan(death = death_fra$mat,exposure=exposure_fra$vect, forecast = 10, family = "poisson",cores=4)
exposure_fra <- retrieve_HMD_data(CNTRY, 'Exposures_1x1', cal_year_range, age_range, gender)
# fit a Lee-Carter model using stan
lc_fit_stan <- apc_stan(death = death_fra$mat,exposure=exposure_fra$vect, forecast = 10, family = "poisson",cores=4)
death_fra <- retrieve_HMD_data(CNTRY, 'Deaths_1x1', cal_year_range, age_range, gender)
death_fra <- retrieve_HMD_data(CNTRY, 'Deaths_1x1', cal_year_range, 40:90, gender)
death_fra <- retrieve_HMD_data(CNTRY, 'Deaths_1x1', cal_year_range, 30:90, gender)
death_fra <- retrieve_HMD_data('HKG', 'Deaths_1x1', cal_year_range, 30:90, gender)
# Fit a Lee-Carter model using StMoMo
data <- hmd.mx(country="FRATNP", username="karim290492@gmail.com", password="longevity19", label="France")
data
View(data)
gender <- "Female"
death_fra <- retrieve_HMD_data('HKG', 'Deaths_1x1', cal_year_range, 30:90, gender)
gender <- "Total"
death_fra <- retrieve_HMD_data('HKG', 'Deaths_1x1', cal_year_range, 30:90, gender)
cal_year_range<-1886:2017
death_fra$DF$Total[1]
library(StanMoMo)
devtools::load_all(".")
library(StanMoMo)
devtools::load_all(".")
library(StanMoMo)
devtools::load_all(".")
retrieve_HMD_data(CNTRY, 'Deaths_1x1', 1970:2017, 50:90, "Male")
load_HMD_data(CNTRY, 'Deaths_1x1', 1970:2017, 50:90, "Male")
death_fra <- load_HMD_data('FRATNP', 'Deaths_1x1', 1970:2017, 50:90, "Male")
death_fra <- load_HMD_data('FRATNP', 'Deaths_1x1', 1970:2017, 50:90, "Male")
library(StanMoMo)
library(StMoMo)
library(matrixcalc)
library(rstan)
library(shinystan)
library("fanplot")
library("RColorBrewer")
library(tidyverse)
library(ggplot2)
library(purrr)
library(HMDHFDplus)
library(demography)
CNTRY <- 'FRATNP'
item <- 'Deaths_1x1' # "Exposures_1x1"
age_range<-50:90
cal_year_range<-1970:2017
gender <- "Male"
retrieve_HMD_data <- function(CNTRY, item, cal_year_range, age_range, gender){
username <- 'pierre.olivier.goffard@gmail.com'
password <- 'StanMoMo'
path <- paste0("https://www.mortality.org/hmd/", CNTRY,
"/STATS/", item)
TEXT <- httr::GET(path, httr::authenticate(username, password),
httr::config(ssl_verifypeer = 0L))
status <- httr::http_status(TEXT)
DF <- read.table(text = httr::content(TEXT, encoding = "UTF-8"),
header = TRUE, skip = 2, na.strings = ".",
as.is = TRUE)
DF <- DF %>% filter( (Age %in% age_range) & (Year %in% cal_year_range) ) %>% select(Year, Age, gender)
mat <- as.matrix(pivot_wider(DF, names_from = Year, values_from = gender) %>% column_to_rownames(., var = "Age"))
vect <- as.integer(vec(mat))
return(
list(DF = DF, mat = mat, vect = vect)
)
}
death_fra <- retrieve_HMD_data(CNTRY, 'Deaths_1x1', cal_year_range, age_range, gender)
install.packages(c("backports", "broom", "DescTools", "devtools", "dplyr", "DT", "expm", "fda", "fs", "ftsa", "ggplot2", "glue", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labelled", "loo", "lubridate", "MASS", "openssl", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppParallel", "remotes", "rlang", "rmarkdown", "roxygen2", "rstan", "rstantools", "rvest", "shiny", "StanHeaders", "sys", "tibble", "tidyr", "tinytex", "TTR", "vctrs", "xfun"))
install.packages(c("backports", "broom", "DescTools", "devtools", "dplyr", "DT", "expm", "fda", "fs", "ftsa", "ggplot2", "glue", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labelled", "loo", "lubridate", "MASS", "openssl", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppParallel", "remotes", "rlang", "rmarkdown", "roxygen2", "rstan", "rstantools", "rvest", "shiny", "StanHeaders", "sys", "tibble", "tidyr", "tinytex", "TTR", "vctrs", "xfun"))
install.packages(c("backports", "broom", "DescTools", "devtools", "dplyr", "DT", "expm", "fda", "fs", "ftsa", "ggplot2", "glue", "htmltools", "httr", "isoband", "jsonlite", "knitr", "labelled", "loo", "lubridate", "MASS", "openssl", "pillar", "pkgbuild", "processx", "promises", "ps", "quantreg", "questionr", "R.methodsS3", "R.oo", "R.utils", "Rcpp", "RcppArmadillo", "RcppParallel", "remotes", "rlang", "rmarkdown", "roxygen2", "rstan", "rstantools", "rvest", "shiny", "StanHeaders", "sys", "tibble", "tidyr", "tinytex", "TTR", "vctrs", "xfun"))
devtools::load_all(".")
