library(roxygen2)
library(Rcpp)
5+5
install.packages("Rcpp")
library("rstantools")
use_rstan()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::use_readme_rmd()
use_readme_rmd()
library(devtools)
use_readme_rmd()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
#Load data for France and define range of ages and years of interest
load("dataFR.Rdata")
#Load data for France and define range of ages and years of interest
load("dataFR.Rdata")
load("C:/Users/n15059/Dropbox/Recherche ISFA/Package StanMoMo/StanMoMo/R/dataFR.RData")
#STAN Mortality Modelling
library(StMoMo)
ages.fit<-50:90
years.fit<-1970:2007
years.predict<-2008:2017
#Define vectors as characters
ages.fitc<-as.character(ages.fit)
years.fitc<-as.character(years.fit)
years.predictc<-as.character(years.predict)
cohort.fit<-(years.fit[1]-ages.fit[length(ages.fit)]):(years.fit[length(years.fit)]-ages.fit[1])
#Extract death and exposures from the data base
dataStMoMo<-StMoMoData(data, series = "male")
death<-dataStMoMo$Dxt[ages.fitc,years.fitc]
exposure<-dataStMoMo$Ext[ages.fitc,years.fitc]
forecast=10
standata <- list(J=nrow(death),T=ncol(death),
d=as.integer(as.vector(death)),
e=as.integer(as.vector(exposure)),
Tfor=forecast)
devtools::load_all(".")
fitLC<-lc_stan(death=death,exposure = exposure,forecast = forecast)
#We can plot the posterior means of the parameters
params<-extract(fitLC)
#library(matrixcalc)
library(rstan)
#We can plot the posterior means of the parameters
params<-extract(fitLC)
#And we can visualize some fan plots
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
library("fanplot")
fan(data=params$a, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
library("RColorBrewer")
library(loo)
fan(data=params$a, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Kappa
plot(years.fit, colMeans(params$k), ylim=range(params$k))
fan(data=params$k, start=years.fit[1],type = "percentile", probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
#gamma
plot(cohort.fit, colMeans(params$g), ylim=range(params$g))
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLC)
library(shinystan)
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLC)
Rhat(fitLC)
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLC)
m1 <- monitor(fitLC, digits_summary = 3)
View(m1)
test<-m1$Rhat
max(test)
test<-m1$Bulk_ESS
min(test)
test<-m1$Rhat
hist(test)
hist(test,breaks=20)
m1$Bulk_ESS
test<-m1$Bulk_ESS
hist(test,breaks=20)
hist(test,breaks=50)
Rhat(fitLC)
Rhat(params)
test<-rhat(fitLC)
m1
devtools::load_all(".")
load("C:/Users/n15059/Dropbox/Recherche ISFA/Package StanMoMo/StanMoMo/R/dataFR.RData")
#STAN Mortality Modelling
library(StMoMo)
ages.fit<-50:90
years.fit<-1970:2007
years.predict<-2008:2017
#Define vectors as characters
ages.fitc<-as.character(ages.fit)
years.fitc<-as.character(years.fit)
years.predictc<-as.character(years.predict)
cohort.fit<-(years.fit[1]-ages.fit[length(ages.fit)]):(years.fit[length(years.fit)]-ages.fit[1])
#Extract death and exposures from the data base
dataStMoMo<-StMoMoData(data, series = "male")
death<-dataStMoMo$Dxt[ages.fitc,years.fitc]
exposure<-dataStMoMo$Ext[ages.fitc,years.fitc]
fitLC<-lc_stan(death=death,exposure=exposure,forecast=10)
death2<-vector('integer')
dval=as.integer(as.vector(death2))
roxygen2::roxygenize()
pkgbuild::compile_dll()
library(StanMoMo)
#STAN Mortality Modelling
library(StMoMo)
#Load data for France and define range of ages and years of interest
load("dataFR.Rdata")
load("C:/Users/n15059/Dropbox/Recherche ISFA/Package StanMoMo/StanMoMo/R/dataFR.RData")
ages.fit<-50:90
years.fit<-1970:2007
years.predict<-2008:2017
#Define vectors as characters
ages.fitc<-as.character(ages.fit)
years.fitc<-as.character(years.fit)
#Extract death and exposures from the data base
dataStMoMo<-StMoMoData(data, series = "male")
death<-as.integer(as.vector(dataStMoMo$Dxt[ages.fitc,years.fitc]))
exposure<-as.integer(as.vector(dataStMoMo$Ext[ages.fitc,years.fitc]))
#As matrix
death<-dataStMoMo$Dxt[ages.fitc,years.fitc]
exposure<-dataStMoMo$Ext[ages.fitc,years.fitc]
fitLc<-lc_stan(death = death,exposure = exposure,forecast = 15,validation = 10,family = "poisson",cores=8)
devtools::load_all(".")
fitLc<-lc_stan(death = death,exposure = exposure,forecast = 15,validation = 10,family = "poisson",cores=8)
roxygen2::roxygenize()
lc_stan?
5
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
library(shinystan)
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLC)
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLc)
load("dataFR.RData")
FRMaleData
devtools::load_all(".")
load("FRMaleData")
FRMaleData
load("C:/Users/n15059/AppData/Local/Temp/EWMaleData.rda")
EWMaleData
death<-FRMaleData$Dxt
load("C:/Users/n15059/Dropbox/Recherche ISFA/Package StanMoMo/StanMoMo/data/FRMaleData.RData")
ages.fit<-as.character(50:90)
years.fit<-as.character(1970:2007)
death<-FRMaleData$Dxt[ages.fit,years.fit]
exposure<-FRMaleData$Ext[ages.fit,years.fit]
library("StanMoMo", lib.loc="~/R/R-3.6.2/library")
fitLC=lc_stan(death = death,exposure=exposure, forecast = 10, family = "poisson")
print(fitLC)
summary(fitLC)
library("fanplot")
library("RColorBrewer")
#And we can visualize some fan plots
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
#And we can visualize some fan plots
params<-extract(fitLC)
#And we can visualize some fan plots
params<-rstan::extract(fitLC)
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
test<-formatC(50:90)
ages.fit<-50:90
years.fit<-1970:2007
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Beta
plot(ages.fit, colMeans(params$b), ylim=range(params$b))
fan(data=params$b, start=ages.fit[1],type = "interval", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Reds"))))
#Kappa
plot(years.fit, colMeans(params$k), ylim=range(params$k))
fan(data=params$k, start=years.fit[1],type = "percentile", probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "percentile", ln = c(95),probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", ln=c(95),ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a))
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
load(data/"FRMaleData.RData")
load(/data/"FRMaleData.RData")
load(\data\"FRMaleData.RData")
library(knitr)
knit('leecarter.Rmd')
knit('leecarter.Rmd')
knit('leecarter.Rmd')
knit('leecarter.Rmd')
rstan:::rstudio_stanc("inst/stan/leecarter.stan")
library(StanMoMo)
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
system.time(fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4))
system.time({fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)})
system.time({fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)})
system.time({fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=1)})
system.time({fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=8)})
print(fitLC)
knitr::opts_chunk$set(echo = TRUE)
library("fanplot")
library("RColorBrewer")
params<-rstan::extract(fitLC)
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab = expression(alpha_x))
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab = expression(\alpha_x))
library(latex2exp)
install.packages("latex2exp")
library(latex2exp)
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("a_x"), xlab="Age: x")
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("\alpha_x"), xlab="Age: x")
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\alpha_x$"), xlab="Age: x")
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
plot(ages.fit, colMeans(params$b), ylim=range(params$b),ylab=TeX("$\\beta_x$"), xlab="Age: x")
fan(data=params$b, start=ages.fit[1],type = "interval", ln = NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Reds"))))
plot(years.fit, colMeans(params$k), ylim=range(params$k),ylab=TeX("$\\kappa_x$"), xlab="Year: t")
fan(data=params$k, start=years.fit[1],type = "percentile",ln = NULL, probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
library(tikzDevice)
install.packages("tikzDevice")
library(tikzDevice)
tikz("tikz-test.tex",width=15/2.54,height=12/2.54)
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
#Define a matrix of predictions
pred<-params$mufor
dim(pred)
sample<-2*niter
sample<-4000
dim(pred)<-list(sample,length(ages.fit),10)
samplesize<-4000
forecastyears<-10
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),forecastyears),
dimnames = list(c(1:samplesize),formatC(ages.fit),formatC(years.fit)))
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),forecastyears))
samplesize<-4000
years.predict<-2008:2017
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),length(years.predict)),
dimnames = list(c(1:samplesize),formatC(ages.fit),formatC(years.predict)))
View(deathFR)
#Plot predictions without StMoMo
probs = c(2.5, 10, 25, 50, 75, 90, 97.5)
qxt <- deathFR / exposureFR
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
detach("package:tikzDevice", unload=TRUE)
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
library("StanMoMo", lib.loc="~/R/R-3.6.2/library")
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
test<-fitLC@model_pars
test
print(fitLC,pars = "a")
library(knitr)
knit("leecarter.Rmd")
knit("leecarter.Rmd")
knit("leecarter.Rmd")
knit("leecarter.Rmd")
roxygen2::roxygenize()
pkgbuild::compile_dll()
pkgbuild::compile_dll() # see note below
roxygen2::roxygenize()
library("rstantools")
pkgbuild::compile_dll()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::load_all(".")
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=rh_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
fitLC=rh_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=1)
print(fitLC,pars = "a")
library("fanplot")
library("RColorBrewer")
library(latex2exp)
params<-rstan::extract(fitLC)
#Alpha
plot(ages.fit, colMeans(params$a), ylim=range(params$a),ylab=TeX("$\\alpha_x$"), xlab="Age: x")
fan(data=params$a, start=ages.fit[1],type = "interval", ln=NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Oranges"))))
plot(ages.fit, colMeans(params$b), ylim=range(params$b),ylab=TeX("$\\beta_x$"), xlab="Age: x")
fan(data=params$b, start=ages.fit[1],type = "interval", ln = NULL,probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Reds"))))
#Kappa
plot(years.fit, colMeans(params$k), ylim=range(params$k),ylab=TeX("$\\kappa_t$"), xlab="Year: t")
fan(data=params$k, start=years.fit[1],type = "percentile",ln = NULL, probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
cohort.fit<-(years.fit[1]-ages.fit[length(ages.fit)]):(years.fit[length(years.fit)]-ages.fit[1])
#gamma
plot(cohort.fit, colMeans(params$g), ylim=range(params$g))
fan(data=params$g, start=cohort.fit[1],type = "percentile", probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
samplesize<-4000
years.predict<-2008:2017
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),length(years.predict)),
dimnames = list(c(1:samplesize),formatC(ages.fit),formatC(years.predict)))
#Fan plots for ages 65,75,85
probs = c(2.5, 10, 25, 50, 75, 90, 97.5)
qxt <- deathFR / exposureFR
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
fan(pred[,"65" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Reds"))), ln = NULL)
fan(pred[,"75" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Greens"))), ln = NULL)
fan(pred[,"85" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Blues"))), ln = NULL)
text(1980, qxt[c("65", "75", "85"), "2000"],
labels = c("x = 65", "x = 75", "x = 85"))
library(rstantools)
roxygen2::roxygenize()
pkgbuild::compile_dll()
devtools::install(quick=TRUE)
devtools::load_all(".")
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=lc_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 10, family = "nb",cores=4)
fitLC=m6_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 10, family = "nb",cores=4)
rstan:::rstudio_stanc("inst/stan/CBDmodel.stan")
rstan:::rstudio_stanc("inst/stan/M6model.stan")
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "nb",cores=4)
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "nb",cores=1)
library("StanMoMo", lib.loc="~/R/R-3.6.2/library")
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=4)
fitLC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 10, family = "poisson",cores=1)
rstan:::rstudio_stanc("inst/stan/RHmodel.stan")
roxygen2::roxygenize()
library(StanMoMo)
StanMoMo?
5+5
StanMoMo::apc_stan?
5+5
?`StanMoMo-package`
?apc_stan
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitLC=m6_stan(death = deathFR,exposure=exposureFR, forecast = 10,age=ages.fit family = "poisson",cores=4)
fitLC=m6_stan(death = deathFR,exposure=exposureFR, forecast = 10,age=ages.fit,family = "nb",cores=4)
print(fitLC,pars = "k2")
library("fanplot")
library("RColorBrewer")
library(latex2exp)
params<-rstan::extract(fitLC)
#Kappa
plot(years.fit, colMeans(params$k), ylim=range(params$k),ylab=TeX("$\\kappa_t$"), xlab="Year: t")
fan(data=params$k, start=years.fit[1],type = "percentile",ln = NULL, probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
#Kappa
plot(years.fit, colMeans(params$k2), ylim=range(params$k2),ylab=TeX("$\\kappa_t$"), xlab="Year: t")
fan(data=params$k2, start=years.fit[1],type = "percentile",ln = NULL, probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
cohort.fit<-(years.fit[1]-ages.fit[length(ages.fit)]):(years.fit[length(years.fit)]-ages.fit[1])
plot(cohort.fit, colMeans(params$g), ylim=range(params$g))
fan(data=params$g, start=cohort.fit[1],type = "percentile", probs = seq(0.01,0.99,0.01),
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))))
#visual convergence diagnostics
#library(shinystan)
launch_shinystan(fitLC)
#visual convergence diagnostics
library(shinystan)
launch_shinystan(fitLC)
samplesize<-4000
years.predict<-2008:2017
pred<-array(params$mufor,dim=list(samplesize,length(ages.fit),length(years.predict)),
dimnames = list(c(1:samplesize),formatC(ages.fit),formatC(years.predict)))
#Fan plots for ages 65,75,85
probs = c(2.5, 10, 25, 50, 75, 90, 97.5)
qxt <- deathFR / exposureFR
matplot(years.fit, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "death rate (log scale)")
fan(pred[,"65" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Reds"))), ln = NULL)
fan(pred[,"75" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Greens"))), ln = NULL)
fan(pred[,"85" , ], start = 2008, probs = probs, n.fan = 4,
fan.col =  colorRampPalette(colors = rev(brewer.pal(9,"Blues"))), ln = NULL)
text(1980, qxt[c("65", "75", "85"), "2000"],
labels = c("x = 65", "x = 75", "x = 85"))
#data<-hmd.mx(country="FRACNP", username="karim290492@gmail.com", password="longevity19", label="France")
load("dataFR.Rdata")
load("C:/Users/n15059/Dropbox/Recherche ISFA/R files/dataFR.RData")
ages.fit<-50:90
years.fit<-1970:2007
#Fit standard mortality models and regularization
library(StMoMo)
dataStMoMo<-StMoMoData(data, series = "male")
wxt <- genWeightMat(ages = ages.fit, years = years.fit)
M6fit <- fit(m6(link = "log"), data = dataStMoMo, ages.fit = ages.fit, years.fit=years.fit,wxt = wxt)
plot(M6fit,parametricbx = FALSE)
test<-M6fit$gc
test
RHfit<-M6fit
nsim<-500
RHsim<-simulate(M6fit,nsim = nsim,h=10)
probs = c(2.5, 10, 25, 50, 75, 90, 97.5)
qxt <- RHfit$Dxt / RHfit$Ext
matplot(RHfit$years, t(qxt[c("65", "75", "85"), ]),
xlim = c(1970, 2017), ylim = c(0.0025, 0.2), pch = 20, col = "black",
log = "y", xlab = "year", ylab = "mortality rate (log scale)")
fan(t(RHsim$rates["65", , ]), start = 2008, probs = probs, n.fan = 4,
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Reds"))), ln = NULL)
fan(t(RHsim$rates["75", , ]), start = 2008, probs = probs, n.fan = 4,
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Greens"))), ln = NULL)
fan(t(RHsim$rates["85", , ]), start = 2008, probs = probs, n.fan = 4,
fan.col = colorRampPalette(colors = rev(brewer.pal(9,"Blues"))), ln = NULL)
devtools::install(quick=TRUE)
5+5
?mortality_weights
?
5
devtools::build_manual(pkg = ".", path = NULL)
library(rstan)
library("rstantools")
library(devtools)
devtools::install(quick=FALSE)
load("~/Dropbox/Recherche ISFA/Package StanMoMo/StanMoMo/data/FRMaleData.RData")
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
detach("package:rstan", unload=TRUE)
install.packages(c("rstan", "rstantools"))
library("rstantools")
install.packages("../StanMoMo", repos = NULL, type = "source")
install.packages("../StanMoMo", repos = NULL, type = "source")
library(StanMoMo)
roxygen2::roxygenize()
install.packages("../StanMoMo", repos = NULL, type = "source")
#Predictions for the StanMoMo package
library(StanMoMo)
library("fanplot")
library("RColorBrewer")
ages.fit<-50:90
years.fit<-1970:2007
deathFR<-FRMaleData$Dxt[formatC(ages.fit),formatC(years.fit)]
exposureFR<-FRMaleData$Ext[formatC(ages.fit),formatC(years.fit)]
fitCBD=cbd_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 20, validation=10,family = "poisson",cores=4)
fitCBD=cbd_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 20, validation=10,family = "poisson",cores=4)
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("rstanarm", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
fitCBD=cbd_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 20, validation=10,family = "poisson",cores=4)
detach("package:rstanarm", unload=TRUE)
detach("package:rstan", unload=TRUE)
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
#Fit the five models
fitLC=lc_stan(death = deathFR,exposure=exposureFR, forecast = 20, validation=10,family = "poisson",cores=4)
fitCBD=cbd_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 20, validation=10,family = "poisson",cores=4)
fitAPC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 20, validation=10,family = "poisson",cores=4)
rstan:::get_CXX()
library("rstanlm")
fit <- lm_stan(y = rnorm(10), x = rnorm(10),
# arguments passed to sampling
iter = 2000, refresh = 500)
fitAPC=apc_stan(death = deathFR,exposure=exposureFR, forecast = 20, validation=10,family = "poisson",cores=4,iter=200)
fitCBD=cbd_stan(death = deathFR,exposure=exposureFR, age=ages.fit,forecast = 20, validation=10,family = "poisson",cores=4,iter=200)
library("rstantools")
roxygen2::roxygenize()
install.packages("../StanMoMo", repos = NULL, type = "source")
install.packages("../StanMoMo", repos = NULL, type = "source")
library(StanMoMo)
devtools::load_all(".")
