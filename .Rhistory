compute_weights_BMA(out_2, stan_models, mortality_models)
cl <- makeCluster(8)
death_sim <- death_matrices[[1]]
clusterExport(cl,c('death_sim','exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({out_1 <- parLapply(cl, mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim , exposure, ages, 10, 10, "nb",
1, 1))})
stopCluster(cl)
model_weights<-mortality_weights(out_1)
model_weights
BMA_weights <- compute_weights_BMA(out_2, stan_models, mortality_models)
BMA_weights
model_weights
model_weights$stacking
model_weights['stacking']
model_weights[,'stacking']
model_weights[,'pseudobma']
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], model_fitted = mortality_models)
stacking_PBMA_weights
rownames(stacking_PBMA_weights) <- NULL
stacking_PBMA_weights
BMA_weights
merge(stacking_PBMA_weights, BMA_weights)
merge(stacking_PBMA_weights, BMA_weights, by  = "model_fitted")
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], fitted_model = mortality_models)
rownames(stacking_PBMA_weights) <- NULL
merge(stacking_PBMA_weights, BMA_weights)
library(StanMoMo)
library(tidyverse)
library(rstan)
devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 2
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
detectCores()
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 5; family = "nb";
chains=1; cores=4
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, 0, 5, family,
chains, cores)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
mortality_models <- c("lc", "rh", "apc", "cbd", "m6")
cl <- makeCluster(2)
clusterExport(cl,c('exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan', 'mortality_models'))
system.time({out_1 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim ,
exposure, ages, 10, 10, "nb",
1, 1)))})
system.time({out_1 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim ,
exposure, ages, 10, 10, "nb",1, 1)))})
library(StanMoMo)
stan_mod
library(StanMoMo)
library(tidyverse)
library(rstan)
# devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
stan_mod
compute_weights_BMA
devtools::load_all(".")
fit_mo_mo
compute_weights_BMA
stan_mod
stan_mod
library(StanMoMo)
library(tidyverse)
library(rstan)
# devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
stan_mod
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 1
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
lc_fit <- fit_mo_mo("lc", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, "lc"))
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposureGBR, "lc"))
rh_fit <- fit_mo_mo("rh", death_matrices[[1]] , exposureGBR, ages, 0, 5, "nb",
1, 4)
log_marg = T
log_marg!
!log_marg
ma_liste = list(log_marg = -789)
ma_liste
devtools::load_all(".")
devtools::load_all(".")
fit_mo_mo
library(StanMoMo)
library(tidyverse)
library(rstan)
# devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 1
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
devtools::load_all(".")
rh_fit <- fit_mo_mo("rh", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T)
devtools::load_all(".")
rh_fit <- fit_mo_mo("rh", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 10000)
rh_fit$logml
rh_fit <- fit_mo_mo("m6", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 10000)
rh_fit$logml
cbd_fit <- fit_mo_mo("cbd", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 10000)
cbd_fit$logml
cbd_fit <- fit_mo_mo("cbd", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 4000)
cbd_fit$logml
cbd_fit <- fit_mo_mo("m6", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 4000)
cbd_fit$logml
m6_fit <- fit_mo_mo("m6", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 4000)
m6_fit$logml
rh_fit <- fit_mo_mo("rh", deathGBR , exposureGBR, ages, 0, 5, "nb",
1, 4, log_marg = T, iter = 4000)
rh_fit$logml
library(CASdatasets)
library(CASdatasets)
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type="source")
library(CASdatasets)
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type = "source")
install.packages("CASdatasets", repos = "http://dutangc.free.fr/pub/RRepos/", type = "source")
data(danish)
data(danishuni)
ddata(danishuni)
data(danishuni)
load(danishuni)
library(tea)
data(danish)
danish
names(danish)
danish[1:5,1:5]
dim(danish)
data(danish)
danish
length(danish)
length(danish)
df_danish = data.frame(loss=danish)
write.csv(danish, "C:\Users\pierr\Documents\code\SMCLoMo\Data\danish.csv")
write.csv(danish, "C:\Users\pierr\Documents\code\SMCLoMo\Data\danish.csv")
write.csv(danish, "C:/Users/pierr/Documents/code/SMCLoMo/Data/danish.csv")
weights_bagging
library(StanMoMo)
library(tidyverse)
library(rstan)
# devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
library(matrixcalc)
# How many years of data
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 1
# We use the Belgian mortality data to get the true model parameters we will use
death<-load_HMD_data('BEL', 'Deaths_1x1', years, ages, "Male")$mat
exposure<-load_HMD_data('BEL', 'Exposures_1x1', years, ages, "Male")$mat
iter <- 2000
post_sample_size <- iter / 2
detectCores()
#Fit Renshaw-Haberman model to Belgian Data
rh_fit <- fit_mo_mo("rh", death , exposure, ages, 0, 5, "nb",1, 4, log_marg = F)
# Simulate deaths according to Renshaw-Haberman
n_sim = 1
post_mean_rh <- extract_map(rh_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_rh$a, post_mean_rh$k, post_mean_rh$b, post_mean_rh$g, post_mean_rh$phi,
years, ages, exposure, "rh"))
exposure[,1:30]
mortality_models <- c("lc", "rh", "apc", "cbd", "m6")
cl <- makeCluster(8)
clusterExport(cl,c('death_matrices','exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan', 'mortality_models'))
system.time({out_1 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim[,1:30],
exposure[,1:30], ages, 10, 10, "nb",1, 1)))})
system.time({out_2 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim[,1:30] ,
exposure[,1:30], ages, 0, 10, "nb",1, 1, log_marg = T)))})
stopCluster(cl)
res <- data.frame()
for(k in 1:n_sim){
k = 1
model_weights<-mortality_weights(out_1[[k]])
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], fitted_model = mortality_models)
rownames(stacking_PBMA_weights) <- NULL
BMA_weights <- compute_weights_BMA(out_2[[k]], mortality_models)
res <- rbind(res, merge(stacking_PBMA_weights, BMA_weights) %>% mutate(sim = k, gen_model = "lc"))
}
res %>% group_by(fitted_model) %>% summarize(
stacking = mean(stacking),
pseudo_BMA = mean(pseudo_BMA),
BMA = mean(BMA, na.rm = T)
)
compute_weights_BMA <- function(stan_fits, mortality_models){
names(stan_fits) <- mortality_models
log_marg <- sapply(mortality_models, function(mortality_model) stan_fits[[mortality_model]]$logml)
log_sum_exp <- function(u) max(u)+log(sum(exp(u-max(u))))
if(any(is.na(log_marg))){
log_lik_list <- sapply(mortality_models, function(mortality_model) rowSums(loo::extract_log_lik(stan_fits[[mortality_model]]$stan_output)))
log_marg <- sapply(mortality_models, function(mortality_model) length(log_lik_list[,mortality_model])-log_sum_exp(-log_lik_list[,mortality_model]))
}
res <- data.frame(BMA = exp(log_marg - max(log_marg, na.rm = TRUE))/ sum(exp(log_marg - max(log_marg, na.rm = T)), na.rm = TRUE), fitted_model = mortality_models)
rownames(res)<-NULL
return(res)
}
res <- data.frame()
for(k in 1:n_sim){
k = 1
model_weights<-mortality_weights(out_1[[k]])
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], fitted_model = mortality_models)
rownames(stacking_PBMA_weights) <- NULL
BMA_weights <- compute_weights_BMA(out_2[[k]], mortality_models)
res <- rbind(res, merge(stacking_PBMA_weights, BMA_weights) %>% mutate(sim = k, gen_model = "lc"))
}
res %>% group_by(fitted_model) %>% summarize(
stacking = mean(stacking),
pseudo_BMA = mean(pseudo_BMA),
BMA = mean(BMA, na.rm = T)
)
names(out_2[[1]]) <- mortality_models
weights_bagging <- res %>% filter(sim == k)
rownames(weights_bagging)<- weights_bagging$fitted_model
stan_fits <- lapply(mortality_models, function(mortality_model) out_2[[k]][[mortality_model]]$stan_output)
names(stan_fits) <- mortality_models
single_pred <- lapply(mortality_models, function(mortality_model) as.vector(t(dplyr::summarise(dplyr::select(as.data.frame(stan_fits[[mortality_model]]),starts_with('mufor[')),across(everything(),mean)))))
single_pred
names(single_pred) <- mortality_models
ensemble_methods <- c('stacking', 'pseudo_BMA', 'BMA')
ensemble_pred <- lapply(ensemble_methods, function(ensemble_method) apply(
sapply(mortality_models,
function(mortality_model) single_pred[[mortality_model]] * weights_bagging[mortality_model,ensemble_method]), 1, sum))
names(ensemble_pred) <- ensemble_methods
pred <- append(single_pred, ensemble_pred)
sapply(append(mortality_models, ensemble_methods), function(model) mean(
apply(
abs(
death_matrices[[k]][1:length(ages),-(1:30)] -
matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]), 1, mean)))
weights_bagging
k=1
names(out_2[[k]]) <- mortality_models
weights_bagging <- res %>% filter(sim == k)
rownames(weights_bagging)<- weights_bagging$fitted_model
stan_fits <- lapply(mortality_models, function(mortality_model) out_2[[k]][[mortality_model]]$stan_output)
names(stan_fits) <- mortality_models
single_pred <- lapply(mortality_models, function(mortality_model) as.vector(t(dplyr::summarise(dplyr::select(as.data.frame(stan_fits[[mortality_model]]),starts_with('mufor[')),across(everything(),mean)))))
names(single_pred) <- mortality_models
ensemble_methods <- c('stacking', 'pseudo_BMA', 'BMA')
ensemble_pred <- lapply(ensemble_methods, function(ensemble_method) apply(
sapply(mortality_models,
function(mortality_model) single_pred[[mortality_model]] * weights_bagging[mortality_model,ensemble_method]), 1, sum))
names(ensemble_pred) <- ensemble_methods
pred <- append(single_pred, ensemble_pred)
mae_temp <- sapply(append(mortality_models, ensemble_methods),
function(model) mean(apply(abs(death_matrices[[k]][1:length(ages),-(1:30)] - matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]),
1, mean)
))
mae_temp$sim=k
mae_temp
mae_temp <- sapply(append(mortality_models, ensemble_methods),
function(model) mean(apply(abs(death_matrices[[k]][1:length(ages),-(1:30)] - matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]),
1, mean)
))
mae_temp
cbind(mae_temp,k)
data.frame(t(mae_temp))
mae_temp <- data.frame(t(
sapply(append(mortality_models, ensemble_methods),
function(model) mean(apply(abs(death_matrices[[k]][1:length(ages),-(1:30)] - matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]),
1, mean)
))
)) %>% mutate(sim = k)
mae_temp
weights_df <- data.frame()
for(k in 1:n_sim){
k = 1
model_weights<-mortality_weights(out_1[[k]])
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], fitted_model = mortality_models)
rownames(stacking_PBMA_weights) <- NULL
BMA_weights <- compute_weights_BMA(out_2[[k]], mortality_models)
weights_df <- rbind(weights_df, merge(stacking_PBMA_weights, BMA_weights) %>% mutate(sim = k, gen_model = "lc"))
}
weights_df %>% group_by(fitted_model) %>% summarize(
stacking = mean(stacking),
pseudo_BMA = mean(pseudo_BMA),
BMA = mean(BMA, na.rm = T)
)
weights_df
mae_df <- data.frame()
for(k in 1:n_sim){
names(out_2[[k]]) <- mortality_models
weights_bagging <- weights_df %>% filter(sim == k)
rownames(weights_bagging)<- weights_bagging$fitted_model
stan_fits <- lapply(mortality_models, function(mortality_model) out_2[[k]][[mortality_model]]$stan_output)
names(stan_fits) <- mortality_models
single_pred <- lapply(mortality_models, function(mortality_model) as.vector(t(dplyr::summarise(dplyr::select(as.data.frame(stan_fits[[mortality_model]]),starts_with('mufor[')),across(everything(),mean)))))
names(single_pred) <- mortality_models
ensemble_methods <- c('stacking', 'pseudo_BMA', 'BMA')
ensemble_pred <- lapply(ensemble_methods, function(ensemble_method) apply(
sapply(mortality_models,
function(mortality_model) single_pred[[mortality_model]] * weights_bagging[mortality_model,ensemble_method]), 1, sum))
names(ensemble_pred) <- ensemble_methods
pred <- append(single_pred, ensemble_pred)
mae_temp <- data.frame(t(
sapply(append(mortality_models, ensemble_methods),
function(model) mean(apply(abs(death_matrices[[k]][1:length(ages),-(1:30)] - matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]),
1, mean)
))
)) %>% mutate(sim = k)
mae <- rbind(mae,mae_temp)
}
for(k in 1:n_sim){
names(out_2[[k]]) <- mortality_models
weights_bagging <- weights_df %>% filter(sim == k)
rownames(weights_bagging)<- weights_bagging$fitted_model
stan_fits <- lapply(mortality_models, function(mortality_model) out_2[[k]][[mortality_model]]$stan_output)
names(stan_fits) <- mortality_models
single_pred <- lapply(mortality_models, function(mortality_model) as.vector(t(dplyr::summarise(dplyr::select(as.data.frame(stan_fits[[mortality_model]]),starts_with('mufor[')),across(everything(),mean)))))
names(single_pred) <- mortality_models
ensemble_methods <- c('stacking', 'pseudo_BMA', 'BMA')
ensemble_pred <- lapply(ensemble_methods, function(ensemble_method) apply(
sapply(mortality_models,
function(mortality_model) single_pred[[mortality_model]] * weights_bagging[mortality_model,ensemble_method]), 1, sum))
names(ensemble_pred) <- ensemble_methods
pred <- append(single_pred, ensemble_pred)
mae <- data.frame(t(
sapply(append(mortality_models, ensemble_methods),
function(model) mean(apply(abs(death_matrices[[k]][1:length(ages),-(1:30)] - matrix(pred[[model]], nrow = length(ages), ncol= 10) * exposure[1:length(ages), -(1:30)]),
1, mean)
))
)) %>% mutate(sim = k)
mae_df <- rbind(mae_df, mae)
}
mae_df
devtools::load_all(".")
rm(list = c("compute_weights_BMA"))
devtools::load_all(".")
compute_weights_BMA
devtools::load_all(".")
compute_weights_BMA
library(StanMoMo)
compute_weights_BMA
library(StanMoMo)
compute_weights_BMA
rm("all")
rm()
BMA_weights
BMA_weights
compute_weights_BMA
compute_weights_BMA
extract_map
library(StanMoMo)
extract_map
extract_map
compute_weights_BMA
library(StanMoMo)
binom(20, 10)
binomial(20, 10)
choose(20, 10)
choose(10, 20)
choose(20, 10)*2**(-20)
1/choose(20, 10)*2**(-20)
1/(choose(20, 10)*2**(-20))
1/(choose(20, 10)*2**(-20))+1/(choose(20, 11)*2**(-20))+ +1/(choose(20, 9)*2**(-20))
1/(choose(20, 10)*2**(-20))+1/(choose(20, 11)*2**(-20)) +1/(choose(20, 9)*2**(-20))
install.packages("rstantools")
library(StanMoMo)
library(StanMoMo)
library(tidyverse)
library(rstan)
library(bridgesampling)
library(parallel)
library(matrixcalc)
# Downloading the belgian mortality data ----
years <- 1959:2019  # years of mortality data
ages <- 50:90  # ages of mortality data
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))  # cohorts base in age and years
death <- load_HMD_data('BEL', 'Deaths_1x1', years, ages, "Male")$mat  # death matrix
exposure <- load_HMD_data('BEL', 'Exposures_1x1', years, ages, "Male")$mat  # exposure matrix
fit_cbd <- fit_mo_mo("cbd", death , exposure, ages, 0, 5, "nb", 1, 4, log_marg = F)
fit_rh <- <- fit_mo_mo("rh", death , exposure, ages, 0, 5, "nb", 1, 4, log_marg = F)
fit_rh <- fit_mo_mo("rh", death , exposure, ages, 0, 5, "nb", 1, 4, log_marg = F)
extract_map(fit_cbd)
params_cbd <- extract_map(fit_cbd)
params_rh <- fit_rh
params_rh
params_rh <- extract_map(fit_rh)
params_rh
sim_death_mix_cbd_rh <- function(params_cbd, params_rh, years, ages, exposure, q){
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
gxt_rh <- 0 * exposure[,1:length(k)]
gxt_cbd <- 0 * exposure[,1:length(k)]
gxt_mix <- 0 * exposure[,1:length(k)]
for(i in 1:length(ages)){
for(j in 1:length(k)){
gxt_cbd[i,j] <- exp(params_cbd$k[j] +(ages[i]-mean(ages))*params_cbd$k2[j]) * exposure[i,j]
gxt_rh[i,j] <- exp(params_rh$a[i] + params_rh$b[i] * params_rh$k[j] +
params_rh$g[match(years[j] - ages[i], cohorts)]) * exposure[i,j]
gxt[i,j] <- q * gxt_cbd[i,j] + (1 - q) * gxt_rh[i,j]
}
}
return(apply(gxt_cbd, 1:2, function(gxt) rnbinom(1,size = phi, prob = phi / (phi + gxt)))
)
}
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2)
params_cbd
sim_death_mix_cbd_rh <- function(params_cbd, params_rh, years, ages, exposure, q){
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
gxt_rh <- 0 * exposure[,1:length(params_cbd$k)]
gxt_cbd <- 0 * exposure[,1:length(params_cbd$k)]
gxt_mix <- 0 * exposure[,1:length(params_cbd$k)]
for(i in 1:length(ages)){
for(j in 1:length(k)){
gxt_cbd[i,j] <- exp(params_cbd$k[j] +(ages[i]-mean(ages))*params_cbd$k2[j]) * exposure[i,j]
gxt_rh[i,j] <- exp(params_rh$a[i] + params_rh$b[i] * params_rh$k[j] +
params_rh$g[match(years[j] - ages[i], cohorts)]) * exposure[i,j]
gxt[i,j] <- q * gxt_cbd[i,j] + (1 - q) * gxt_rh[i,j]
}
}
return(apply(gxt_cbd, 1:2, function(gxt) rnbinom(1,size = phi, prob = phi / (phi + gxt)))
)
}
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2)
sim_death_mix_cbd_rh <- function(params_cbd, params_rh, years, ages, exposure, q){
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
gxt_rh <- 0 * exposure[,1:length(params_cbd$k)]
gxt_cbd <- 0 * exposure[,1:length(params_cbd$k)]
gxt_mix <- 0 * exposure[,1:length(params_cbd$k)]
for(i in 1:length(ages)){
for(j in 1:length(params_cbd$k)){
gxt_cbd[i,j] <- exp(params_cbd$k[j] +(ages[i]-mean(ages))*params_cbd$k2[j]) * exposure[i,j]
gxt_rh[i,j] <- exp(params_rh$a[i] + params_rh$b[i] * params_rh$k[j] +
params_rh$g[match(years[j] - ages[i], cohorts)]) * exposure[i,j]
gxt[i,j] <- q * gxt_cbd[i,j] + (1 - q) * gxt_rh[i,j]
}
}
return(apply(gxt_cbd, 1:2, function(gxt) rnbinom(1,size = phi, prob = phi / (phi + gxt)))
)
}
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2)
sim_death_mix_cbd_rh <- function(params_cbd, params_rh, years, ages, exposure, q){
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
gxt_rh <- 0 * exposure[,1:length(params_cbd$k)]
gxt_cbd <- 0 * exposure[,1:length(params_cbd$k)]
gxt_mix <- 0 * exposure[,1:length(params_cbd$k)]
for(i in 1:length(ages)){
for(j in 1:length(params_cbd$k)){
gxt_cbd[i,j] <- exp(params_cbd$k[j] +(ages[i]-mean(ages))*params_cbd$k2[j]) * exposure[i,j]
gxt_rh[i,j] <- exp(params_rh$a[i] + params_rh$b[i] * params_rh$k[j] +
params_rh$g[match(years[j] - ages[i], cohorts)]) * exposure[i,j]
gxt_mix[i,j] <- q * gxt_cbd[i,j] + (1 - q) * gxt_rh[i,j]
}
}
return(apply(gxt_mix, 1:2, function(gxt) rnbinom(1,size = phi, prob = phi / (phi + gxt)))
)
}
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2)
params_cbd
params_rh
sim_death_mix_cbd_rh <- function(params_cbd, params_rh, years, ages, exposure, q){
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
gxt_rh <- 0 * exposure[,1:length(params_cbd$k)]
gxt_cbd <- 0 * exposure[,1:length(params_cbd$k)]
gxt_mix <- 0 * exposure[,1:length(params_cbd$k)]
for(i in 1:length(ages)){
for(j in 1:length(params_cbd$k)){
gxt_cbd[i,j] <- exp(params_cbd$k[j] +(ages[i]-mean(ages))*params_cbd$k2[j]) * exposure[i,j]
gxt_rh[i,j] <- exp(params_rh$a[i] + params_rh$b[i] * params_rh$k[j] +
params_rh$g[match(years[j] - ages[i], cohorts)]) * exposure[i,j]
gxt_mix[i,j] <- q * gxt_cbd[i,j] + (1 - q) * gxt_rh[i,j]
}
}
phi <- q * params_cbd$phi + (1 - q) * params_rh$phi
return(apply(gxt_mix, 1:2, function(gxt) rnbinom(1,size = phi, prob = phi / (phi + gxt)))
)
}
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2)
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2) / exposure
death / exposure
sim_death_mix_cbd_rh(params_cbd, params_rh, years, ages, exposure, 1/2) / exposure > 1
install.packages("devtools")
devtools::load_all(".")
