"/STATS/", item)
TEXT <- httr::GET(path, httr::authenticate(username, password),
httr::config(ssl_verifypeer = 0L))
status <- httr::http_status(TEXT)
DF <- read.table(text = httr::content(TEXT, encoding = "UTF-8"),
header = TRUE, skip = 2, na.strings = ".",
as.is = TRUE)
DF <- dplyr::select(dplyr::filter(DF,(Age %in% age_range) & (Year %in% cal_year_range)), c('Year', 'Age', gender))
DF <- dplyr::select(dplyr::filter(DF,(Age %in% age_range) & (Year %in% cal_year_range)), c('Year', 'Age', all_of(gender)))
DF
mat <- column_to_rownames(as.matrix(tidyverse::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- tidyverse::column_to_rownames(as.matrix(tidyverse::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- tibble::column_to_rownames(as.matrix(tidyverse::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- tibble::column_to_rownames(as.matrix(tidyr::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- textshape::column_to_rownames(as.matrix(tidyr::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- tidyr::column_to_rownames(as.matrix(tidyr::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
mat <- tidyverse::column_to_rownames(as.matrix(tidyr::pivot_wider(DF, names_from = Year, values_from = gender), var = "Age"))
tidyr::pivot_wider(DF, names_from = Year, values_from = gender)
mat <- tidyverse::as.matrix(tibble::column_to_rownames(tidyr::pivot_wider(DF, names_from = Year, values_from = gender),
var = "Age")))
mat <- as.matrix(tibble::column_to_rownames(tidyr::pivot_wider(DF, names_from = Year, values_from = gender),
var = "Age")))
tibble::column_to_rownames(tidyr::pivot_wider(DF, names_from = Year, values_from = gender),
var = "Age")
mat <- as.matrix(tibble::column_to_rownames(tidyr::pivot_wider(DF, names_from = Year, values_from = gender),
var = "Age"))
mat
vect <- as.integer(matrixcalc::vec(mat))
devtools::load_all(".")
library(StanMoMo)
# How many years of data
years <- 1979:2008
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
lc_fit <- lc_stan(death = deathGBR,exposure=exposureGBR, validation=0, forecast = 1, family = "nb",chains=1,cores=4)
cbd_fit <- cbd_stan(death = deathGBR,exposure=exposureGBR, age=ages,
validation = 0, forecast = 1, family = "nb",chains=1,cores=4)
names(cbd_fit)
post_mean_lc <- as.data.frame(lc_fit) %>%
select(starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi') %>%
summarise(across(everything(), mean))
post_mean_lc <- as.data.frame(lc_fit) %>%
select(starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi') %>%
summarise(across(everything(), mean))
library(tidyverse)
post_mean_lc <- as.data.frame(lc_fit) %>%
select(starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi') %>%
summarise(across(everything(), mean))
post_mean_lc
post_mean_lc <- as.data.frame(cbd_fit) %>%
select(starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi') %>%
summarise(across(everything(), mean))
post_mean_lc
post_mean_lc <-  %>%
dplyr::select(as.data.frame(stan_fit),starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi')
stan_fit <- lc_fit
post_mean_lc <-  %>%
dplyr::select(as.data.frame(stan_fit),starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi')
post_mean_lc <-  %>%
summarise(dplyr::select(as.data.frame(stan_fit),starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi'),across(everything(), mean))
post_mean_lc <-  summarise(dplyr::select(as.data.frame(stan_fit),starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi'),across(everything(), mean))
post_mean <-  summarise(dplyr::select(as.data.frame(stan_fit),starts_with('a['), starts_with('b['), starts_with('k['), starts_with('k2['),  starts_with('g['), 'phi'),across(everything(), mean))
list(a = as.vector(t(post_mean_lc %>% select(starts_with('a[')))))
list(a = as.vector(t(post_mean_lc %>% select(starts_with('a[')))),
b = as.vector(t(post_mean_lc %>% select(starts_with('b[')))),
k = as.vector(t(post_mean_lc %>% select(starts_with('k[')))),
phi = as.vector(t(post_mean_lc %>% select(starts_with('phi'))))
)
list(a = as.vector(t(select(post_mean, starts_with('a[')))),
b = as.vector(t(select(post_mean,starts_with('b[')))),
k = as.vector(t(select(post_mean, starts_with('k[')))),
k2 = as.vector(t(select(post_mean, starts_with('k2[')))),
phi = as.vector(t(select(post_mean, starts_with('phi'))))
)
res <- list(a = as.vector(t(select(post_mean, starts_with('a[')))),
b = as.vector(t(select(post_mean,starts_with('b[')))),
k = as.vector(t(select(post_mean, starts_with('k[')))),
k2 = as.vector(t(select(post_mean, starts_with('k2[')))),
g = as.vector(t(select(post_mean, starts_with('g[')))),
phi = as.vector(t(select(post_mean, starts_with('phi'))))
)
res
devtools::load_all(".")
devtools::load_all(".")
library(StanMoMo)
setwd("C:/Users/pierr/Dropbox/Collab/Barigou-Goffard-Salhi/R scripts")
library(StanMoMo)
library(tidyverse)
library(rstan)
library(bridgesampling)
library(parallel)
fit_mo_mo
StanMoMo::fit_mo_mo
setwd("C:/Users/pierr/Documents/code/StanMoMo")
library(StanMoMo)
library(StanMoMo)
library(tidyverse)
library(rstan)
library(bridgesampling)
library(parallel)
fit_mo_mo
StanMoMo::fit_mo_mo
devtools::load_all(".")
fit_mo_mo
library(StanMoMo)
fit_mo_mo
years <- 1979:2008
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 2
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 1; family = "nb";
chains=1; cores=8
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, validation, forecast, family,
chains, cores)
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 2; family = "nb";
chains=1; cores=8
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, validation, forecast, family,
chains, cores)
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 5; family = "nb";
chains=1; cores=8
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, validation, forecast, family,
chains, cores)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
samplingfunction<-function(x){
if (x==1) res<-lc_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==2) res<-rh_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==3) res<-apc_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==4) res<-cbd_stan(death = death_matrices[[1]],exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==5) res<-m6_stan(death = death_matrices[[1]],exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
}
cl <- makeCluster(5)
clusterExport(cl,c('death_sim_lc','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
clusterExport(cl,c('death_matrices[[1]]','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
death_sim_lc <- death_matrices[[1]]
cl <- makeCluster(5)
clusterExport(cl,c('death_sim_lc','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({save1 <- parLapply(cl, c(1:5),samplingfunction)})
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
death_matrices[[1]]
clusterExport(cl,c('death_matrices','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({save1 <- parLapply(cl, c(1:5),samplingfunction)})
save1
ages
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
samplingfunction<-function(x){
if (x==1) res<-lc_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==2) res<-rh_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==3) res<-apc_stan(death = death_matrices[[1]],exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==4) res<-cbd_stan(death = death_matrices[[1]],exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==5) res<-m6_stan(death = death_matrices[[1]],exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
}
death_sim_lc <- death_matrices[[1]]
cl <- makeCluster(5)
clusterExport(cl,c('death_matrices','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({save1 <- parLapply(cl, c(1:5),samplingfunction)})
save1
death_sim_lc <- death_matrices[[1]]
death_sim_lc <- death_matrices[[1]]
samplingfunction<-function(x){
if (x==1) res<-lc_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==2) res<-rh_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==3) res<-apc_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==4) res<-cbd_stan(death = death_sim_lc,exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==5) res<-m6_stan(death = death_sim_lc,exposure=exposureGBR, age=ages,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
}
cl <- makeCluster(5)
clusterExport(cl,c('death_sim_lc','exposureGBR','ages','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({save1 <- parLapply(cl, c(1:5),samplingfunction)})
stopCluster(cl)
save1
library(StanMoMo)
library(tidyverse)
# library(ggplot2)
library(matrixcalc)
# library(purrr)
# help(load_HMD_data)
years <- 1979:2008
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', 1979:2008, 50:90, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', 1979:2008, 50:90, "Male")$mat
lc_fit <- lc_stan(death = deathGBR,exposure=exposureGBR, validation=0,forecast = 1, family = "nb",chains=1,cores=4)
lc_fit
lc_fit
post_mean_lc <- as.data.frame(lc_fit) %>% select(starts_with('a['), starts_with('b['), starts_with('k['), 'phi') %>% summarise(across(everything(), mean))
post_mean_apc <- as.data.frame(apc_fit) %>% select(starts_with('a['), starts_with('g['), starts_with('k['), 'phi') %>% summarise(across(everything(), mean))
post_mean_lc
a_lc <- as.vector(t(post_mean_lc %>% select(starts_with('a['))))
b_lc <- as.vector(t(post_mean_lc %>% select(starts_with('b['))))
k_lc <- as.vector(t(post_mean_lc %>% select(starts_with('k['))))
phi_lc <- as.numeric(post_mean_lc %>% select('phi'))
gxt_lc <- exp(sapply(k_lc, function(kt) a_lc + b_lc * kt))*exposureGBR[,1:length(k_lc)]
# death_sim <- apply(lambda_mat,1:2, function(lam) rpois(1,lambda = lam))
# Negative binomial death count
death_sim_lc <- apply(gxt_lc, 1:2, function(gxt) rnbinom(1,size = phi_lc, prob = phi_lc/(phi_lc+gxt)))
library(parallel)
ages.fit<-50:90
samplingfunction<-function(x){
if (x==1) res<-lc_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==2) res<-rh_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==3) res<-apc_stan(death = death_sim_lc,exposure=exposureGBR, validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==4) res<-cbd_stan(death = death_sim_lc,exposure=exposureGBR, age=ages.fit,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
else if (x==5) res<-m6_stan(death = death_sim_lc,exposure=exposureGBR, age=ages.fit,
validation=10,forecast = 10, family = "nb",chains=1,cores=1)
}
cl <- makeCluster(4)
clusterExport(cl,c('death_sim_lc','exposureGBR','ages.fit','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({out <- parLapply(cl, c(1:5),samplingfunction)})
out
stopCluster(cl)
devtools::load_all(".")
library(StanMoMo)
library(tidyverse)
library(rstan)
devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
install.packages("rlang")
library(StanMoMo)
library(tidyverse)
library(rstan)
devtools::install_github("quentingronau/bridgesampling@master")
library(parallel)
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 2
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
detectCores()
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 5; family = "nb";
chains=1; cores=4
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, 0, 5, family,
chains, cores)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
fit_mo_mo
library(StanMoMo)
fit_mo_mo
library(StanMoMo)
fit_mo_mo
library(tidyverse)
library(rstan)
library(bridgesampling)
library(parallel)
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 2
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
detectCores()
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 5; family = "nb";
chains=1; cores=4
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, 0, 5, family,
chains, cores)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
mortality_models <- c("lc", "rh", "apc", "cbd", "m6")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
stan_models <- lapply(mortality_models, function(mortality_model)
stan_mod(mortality_model, 0, forecast, "nb", death, exposure, ages))
stan_mod
compute_weights_BMA
stan_mod <- function(mortality_model, validation=0, forecast, family = "nb", death, exposure, age){
if(mortality_model %in% c('lc', 'rh', 'apc')){
Tval<-0
if (validation !=0) Tval=validation
if (Tval==0) {
death1<-death
exposure1<-exposure
death2<-vector('integer')
exposure2<-vector('integer')
index<-seq(3,ncol(death1))
} else {
T<- ncol(death)-Tval
death1<-death[,1:T]
death2<-death[,(T+1):ncol(death)]
exposure1<-exposure[,1:T]
exposure2<-exposure[,(T+1):ncol(exposure)]
index<-seq(3,T)
}
if (family == "poisson") {
family <- 0
} else if (family == "nb") {
family <- 1
}
standata<- list(J=nrow(death1),T=ncol(death1),
d=as.integer(as.vector(death1)),
e=as.integer(as.vector(exposure1)),
dval=as.integer(as.vector(death2)),
eval=as.integer(as.vector(exposure2)),
Tfor=forecast,Tval=Tval,
family=family,index=index)
if(mortality_model == "lc"){
res <- stan('leecarter.stan', data=standata,chains = 0)
}else if(mortality_model == "rh"){
res <- stan('RHmodel.stan', data=standata,chains = 0)
}else if(mortality_model == "apc"){
res <- stan('APCmodel.stan', data = standata, chains = 0)
}
}else{
Tval<-0
if (validation !=0) Tval=validation
if (Tval==0) {
death1<-death
exposure1<-exposure
death2<-vector('integer')
exposure2<-vector('integer')
index<-seq(2,ncol(death1))
} else {
T<- ncol(death)-Tval
death1<-death[,1:T]
death2<-death[,(T+1):ncol(death)]
exposure1<-exposure[,1:T]
exposure2<-exposure[,(T+1):ncol(exposure)]
index<-seq(2,T)
}
# family<-match.arg(family)
if (family == "poisson") {
family <- 0
} else if (family == "nb") {
family <- 1
}
standata2<- list(J=nrow(death1),T=ncol(death1),
d=as.integer(as.vector(death1)),
e=as.integer(as.vector(exposure1)),
age=age,
dval=as.integer(as.vector(death2)),
eval=as.integer(as.vector(exposure2)),
Tfor=forecast,Tval=Tval,
family=family,index=index)
if(mortality_model == "cbd"){
res <- new_mod4 <- stan('CBDmodel.stan', data = standata2, chains = 0)
}else if(mortality_model == "m6"){
res <- stan('M6model.stan', data = standata2, chains = 0)
}
}
return(res)
}
#' compute_weights_BMA: compute the model evidence via bridge sampling
#'
#' @param stan_fits  list of Stan model fits
#' @param stan_models  list of Stan model
#' @param mortality_models vector of mortality models names
#'
#' @return data frame with model evidence for BMA
#' @export
#'
#' @examples
#'
#'
compute_weights_BMA <- function(stan_fits, stan_models, mortality_models){
names(stan_fits) <- mortality_models
names(stan_models) <- mortality_models
log_marg <- sapply(mortality_models, function(mortality_model) bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml)
res <- data.frame(BMA = exp(log_marg - max(log_marg, na.rm = TRUE))/ sum(exp(log_marg - max(log_marg)), na.rm = TRUE), fitted_model = mortality_models)
rownames(res)<-NULL
return(res)
}
stan_models <- lapply(mortality_models, function(mortality_model)
stan_mod(mortality_model, 0, forecast, "nb", death, exposure, ages))
cl <- makeCluster(8)
clusterExport(cl,c('death_sim','exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({out_2 <- parLapply(cl, mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim , exposure, ages, 0, 5, "nb",
1, 1))})
stopCluster(cl)
death_sim <- death_matrices[[1]]
cl <- makeCluster(8)
clusterExport(cl,c('death_sim','exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({out_2 <- parLapply(cl, mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim , exposure, ages, 0, 5, "nb",
1, 1))})
stopCluster(cl)
compute_weights_BMA
compute_weights_BMA(out_2, stan_models, mortality_models)
out_2
stan_fits <- out_2
names(stan_fits) <- mortality_models
stan_models
stan_models
names(stan_models) <- mortality_models
mortality_model <- "lc"
stan_fits[[mortality_model]]
stan_models[[mortality_model]]
bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml
mortality_model <- "rh"
bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml
mortality_model <- "cbd"
bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml
mortality_model <- "m6"
bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml
mortality_model <- "apc"
bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml
log_marg <- sapply(mortality_models, function(mortality_model) bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml)
log_marg
max(log_marg, na.rm = TRUE)
log_marg - max(log_marg, na.rm = TRUE)
sum(exp(log_marg - max(log_marg)), na.rm = TRUE)
exp(log_marg - max(log_marg))
res <- data.frame(BMA = exp(log_marg - max(log_marg, na.rm = TRUE))/ sum(exp(log_marg - max(log_marg, na.rm = T)), na.rm = TRUE), fitted_model = mortality_models)
res
devtools::load_all("C:/Users/pierr/Documents/code/StanMoMo")
compute_weights_BMA <- function(stan_fits, stan_models, mortality_models){
names(stan_fits) <- mortality_models
names(stan_models) <- mortality_models
log_marg <- sapply(mortality_models, function(mortality_model) bridgesampling::bridge_sampler(stan_fits[[mortality_model]],
stan_models[[mortality_model]],silent = TRUE)$logml)
res <- data.frame(BMA = exp(log_marg - max(log_marg, na.rm = TRUE))/ sum(exp(log_marg - max(log_marg, na.rm = T)), na.rm = TRUE), fitted_model = mortality_models)
rownames(res)<-NULL
return(res)
}
compute_weights_BMA(out_2, stan_models, mortality_models)
cl <- makeCluster(8)
death_sim <- death_matrices[[1]]
clusterExport(cl,c('death_sim','exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan'))
system.time({out_1 <- parLapply(cl, mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim , exposure, ages, 10, 10, "nb",
1, 1))})
stopCluster(cl)
model_weights<-mortality_weights(out_1)
model_weights
BMA_weights <- compute_weights_BMA(out_2, stan_models, mortality_models)
BMA_weights
model_weights
model_weights$stacking
model_weights['stacking']
model_weights[,'stacking']
model_weights[,'pseudobma']
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], model_fitted = mortality_models)
stacking_PBMA_weights
rownames(stacking_PBMA_weights) <- NULL
stacking_PBMA_weights
BMA_weights
merge(stacking_PBMA_weights, BMA_weights)
merge(stacking_PBMA_weights, BMA_weights, by  = "model_fitted")
stacking_PBMA_weights <- data.frame(stacking = model_weights[,'stacking'],pseudo_BMA = model_weights[,'pseudobma'], fitted_model = mortality_models)
rownames(stacking_PBMA_weights) <- NULL
merge(stacking_PBMA_weights, BMA_weights)
library(StanMoMo)
library(tidyverse)
library(rstan)
devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
years <- 1979:2018
ages <- 50:90
cohorts <- sort(unique(as.vector(sapply(years, function(year) year - ages))))
n_sim = 2
# We use the GB mortality data to get the true model parameters we will use
deathGBR<-load_HMD_data('GBR_NP', 'Deaths_1x1', years, ages, "Male")$mat
exposureGBR<-load_HMD_data('GBR_NP', 'Exposures_1x1', years, ages, "Male")$mat
detectCores()
mortality_model ="lc"; death = deathGBR; exposure = exposureGBR; ages = 50:90; validation = 5; forecast = 5; family = "nb";
chains=1; cores=4
lc_fit <- fit_mo_mo(mortality_model, death , exposure, ages, 0, 5, family,
chains, cores)
post_mean_lc <- extract_map(lc_fit)
death_matrices <- lapply(1:n_sim, function(j)
sim_mortality_data(post_mean_lc$a, post_mean_lc$k, post_mean_lc$b, post_mean_lc$g, post_mean_lc$phi,
years, ages, exposure, mortality_model))
mortality_models <- c("lc", "rh", "apc", "cbd", "m6")
cl <- makeCluster(2)
clusterExport(cl,c('exposure','ages','fit_mo_mo','lc_stan','rh_stan','apc_stan','cbd_stan','m6_stan', 'mortality_models'))
system.time({out_1 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim ,
exposure, ages, 10, 10, "nb",
1, 1)))})
system.time({out_1 <- parLapply(cl, death_matrices, function(death_sim)
lapply(mortality_models, function(mortality_model) fit_mo_mo(mortality_model, death_sim ,
exposure, ages, 10, 10, "nb",1, 1)))})
library(StanMoMo)
stan_mod
library(StanMoMo)
library(tidyverse)
library(rstan)
# devtools::install_github("quentingronau/bridgesampling@master")
library(bridgesampling)
library(parallel)
stan_mod
compute_weights_BMA
